function Age(age){
    return new Promise((resolve,reject)=>{
        if(age>=18){
            resolve("Access provided");
        }
        else{
            reject("Access denied");
        }
    })
}


async function foo(){
    try{
        let result = await Age(21);
        console.log("Result:",result);
    }
    catch(error){
        console.error("Error:",error);
    }
}

foo();


function Age(age){
    return new Promise((resolve,reject)=>{
        if(age>=18){
            resolve("Age is > 18")
        }
        else{
            reject("Age should be > 18")
        }
    })
}

async function foo(){
    try{
        let result = await Age(21);
        console.log("Result:",result);
    }
    catch(error){
        console.error("Error:", error);
    }
}

foo();


function Age(age){
    return new Promise((resolve,reject)=>{
        if(age>=18){
            resolve("access provided");
        }
        else{
            resolve("access denied");
        }
    })
}

async function foo(){
    try{
        let res=await Age(32);
        console.log("Result:",res);
    }
    catch(error){
        console.error("Error:",error)
    }
}

basic api 

const http=require('http');
const data = require('data');
http.createServer((req,res)=>{
    res.write(JSON.stringify(data));
    res.end();
})


function Age(age){
    return new Promise((res,rej)=>{
        if(age>=18)
        res("access done");
        else{
        res("access denied");
        }
    })
}

async function foo(){
    try{
        let result=await Age(21);
        console.log("Result:",result)
    }
    catch(error){
        console.error("Error:",error);
    }
}

function Age(age){
    return new Promise((res,rej)=>{
        if(age>=18){
            res("access provided");
        }
        else{
            res("access denied");
        }
    })
}

async fuction foo(){
    try{
        let res=await Age(21);
        console.log("result:",res);
    }
    catch(error){
        console.log("Error:",error)
    }
}


function add(a,b){
    return new Promise((res,rej)=>{
        const sum=a+b;
        res(sum);
    })
}

add(2,4)
.then((res)=>{
    console.log("res:",res);
})
.catch((error)=>{
    console.log("error:",error);
})


async await
promises 
event loop 
Asynchrnous behavior 
single threaded -> one task at a time 
basic api 
create a http server 
create routes 
callback - todo 




write a simple callback function

function add(a,b,callback){
    setTimeout(()=>{
        const sum=a+b;
        display(sum);
    })
}

function display(res){
    console.log(res);
}

add(2,4,display);

function Age(age){
    return new Promise((req,res)=>{
        if(age>=18){
            res("access done")
        }
        else{
            res("access denied")
        }
    })
}
async function foo(){
    try{
        let res=await Age(21);
        console.log(res);
    }
    catch(error){
        console.log(error);
    }
}